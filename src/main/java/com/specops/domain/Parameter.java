package com.specops.domain;

import java.util.List;
import java.util.Objects;

/**
 * Represents a unique parameter in the Global Parameter Store.
 */
public class Parameter {

    private final String name;
    private final String in;        // query, header, path, cookie, body
    private final String type;      // string, integer, boolean, etc.

    private String value;           // current chosen value (editable, may be null internally)
    private boolean isLocked;
    private ValueSource source = ValueSource.UNKNOWN;

    // OpenAPI metadata
    private String description;
    private String defaultValue;
    private String exampleValue;
    private List<String> enumValues;
    private boolean required;

    private String jsonPath;

    public Parameter(String name, String in, String type) {
        this.name = name;
        this.in = in;
        this.type = type != null ? type : "string";
    }

    public String getUniqueKey() {
        if ("body".equalsIgnoreCase(in)) {
            String jp = getJsonPath();
            if (jp == null || jp.isEmpty()) jp = name == null ? "" : name;
            return jp + "|" + "body";
        }
        return (name == null ? "" : name) + "|" + (in == null ? "" : in);
    }

    public String getName() {
        return name;
    }

    public String getIn() {
        return in;
    }

    public String getType() {
        return type;
    }

    public String getValue() {
        return value == null ? "" : value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public boolean isLocked() {
        return isLocked;
    }

    public void setLocked(boolean locked) {
        isLocked = locked;
    }

    public ValueSource getSource() {
        return source;
    }

    public void setSource(ValueSource source) {
        this.source = source == null ? ValueSource.UNKNOWN : source;
    }

    public String getDescription() {
        return description == null ? "" : description;
    }

    // --- OpenAPI metadata ---

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDefaultValue() {
        return defaultValue == null ? "" : defaultValue;
    }

    public void setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
    }

    public String getExampleValue() {
        return exampleValue == null ? "" : exampleValue;
    }

    public void setExampleValue(String exampleValue) {
        this.exampleValue = exampleValue;
    }

    public List<String> getEnumValues() {
        return enumValues;
    }

    public void setEnumValues(List<String> enumValues) {
        this.enumValues = enumValues;
    }

    public boolean isRequired() {
        return required;
    }

    public void setRequired(boolean required) {
        this.required = required;
    }

    public boolean hasEnum() {
        return enumValues != null && !enumValues.isEmpty();
    }

    public boolean hasValue() {
        return value != null && !value.isEmpty();
    }

    public String getJsonPath() {
        return jsonPath == null ? "" : jsonPath;
    }

    public void setJsonPath(String jsonPath) {
        this.jsonPath = jsonPath;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Parameter parameter)) return false;
        // Equality should honor jsonPath for body params
        if ("body".equalsIgnoreCase(in)) {
            return Objects.equals(in, parameter.in) &&
                    Objects.equals(getJsonPath(), parameter.getJsonPath());
        }
        return Objects.equals(name, parameter.name) &&
                Objects.equals(in, parameter.in);
    }

    @Override
    public int hashCode() {
        if ("body".equalsIgnoreCase(in)) {
            return Objects.hash(in, getJsonPath());
        }
        return Objects.hash(name, in);
    }

    /**
     * Value sources. Includes legacy names to avoid breaking callers.
     */
    public enum ValueSource {
        UNKNOWN,
        DEFAULT,
        EXAMPLE,
        USER,          // generic user provided

        // legacy constants referenced elsewhere
        USER_INPUT,    // alias of USER
        PROXY,         // populated from proxy history
        GENERATED,     // generated by ValueGenerator
        IMPORTED,      // imported from JSON/CSV file
        PARSER         // populated from parser defaults
    }
}
